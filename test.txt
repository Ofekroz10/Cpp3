RealVariable x; 
CHECK_THROWS_AS(solve(54*(x^2) + 24*x + 59 == 0), std::exception);
CHECK_THROWS_AS(solve(43*(x^2) + 25*x + 14 == 0), std::exception);
CHECK_THROWS_AS(solve(45*(x^2) + 15*x + 29 == 0), std::exception);
CHECK_THROWS_AS(solve(35*(x^2) + 14*x + 14 == 0), std::exception);
CHECK_THROWS_AS(solve(10*(x^2) + 7*x + 49 == 0), std::exception);
CHECK(solve(51*(x^2) + 26*x + 2 == 0) >= -0.0945 && solve(51*(x^2) + 26*x + 2 == 0) <= -0.0943);
CHECK_THROWS_AS(solve(12*(x^2) + 13*x + 57 == 0), std::exception);
CHECK_THROWS_AS(solve(41*(x^2) + 53*x + 40 == 0), std::exception);
CHECK(solve(24*(x^2) + 57*x + 18 == 0) >= -0.3751 && solve(24*(x^2) + 57*x + 18 == 0) <= -0.3749);
CHECK_THROWS_AS(solve(35*(x^2) + 26*x + 22 == 0), std::exception);
CHECK_THROWS_AS(solve(37*(x^2) + 12*x + 54 == 0), std::exception);
CHECK_THROWS_AS(solve(47*(x^2) + 54*x + 41 == 0), std::exception);
CHECK_THROWS_AS(solve(13*(x^2) + 23*x + 22 == 0), std::exception);
CHECK_THROWS_AS(solve(41*(x^2) + 31*x + 53 == 0), std::exception);
CHECK_THROWS_AS(solve(24*(x^2) + 31*x + 16 == 0), std::exception);
CHECK_THROWS_AS(solve(6*(x^2) + 8*x + 58 == 0), std::exception);
CHECK(solve(2*(x^2) + 37*x + 30 == 0) >= -0.85 && solve(2*(x^2) + 37*x + 30 == 0) <= -0.8498);
CHECK(solve(27*(x^2) + 47*x + 12 == 0) >= -0.3109 && solve(27*(x^2) + 47*x + 12 == 0) <= -0.3107);
CHECK_THROWS_AS(solve(35*(x^2) + 6*x + 48 == 0), std::exception);
CHECK_THROWS_AS(solve(42*(x^2) + 27*x + 37 == 0), std::exception);
CHECK(solve(10*(x^2) + 45*x + 3 == 0) >= -0.0678 && solve(10*(x^2) + 45*x + 3 == 0) <= -0.0676);
CHECK_THROWS_AS(solve(39*(x^2) + 10*x + 52 == 0), std::exception);
CHECK_THROWS_AS(solve(43*(x^2) + 44*x + 29 == 0), std::exception);
CHECK(solve(13*(x^2) + 57*x + 30 == 0) >= -0.6117 && solve(13*(x^2) + 57*x + 30 == 0) <= -0.6115);
CHECK_THROWS_AS(solve(6*(x^2) + 13*x + 26 == 0), std::exception);
CHECK_THROWS_AS(solve(32*(x^2) + 3*x + 8 == 0), std::exception);
CHECK_THROWS_AS(solve(11*(x^2) + 7*x + 21 == 0), std::exception);
CHECK_THROWS_AS(solve(56*(x^2) + 47*x + 24 == 0), std::exception);
CHECK_THROWS_AS(solve(1*(x^2) + 8*x + 48 == 0), std::exception);
CHECK_THROWS_AS(solve(19*(x^2) + 2*x + 31 == 0), std::exception);
CHECK_THROWS_AS(solve(56*(x^2) + 13*x + 6 == 0), std::exception);
CHECK_THROWS_AS(solve(22*(x^2) + 2*x + 1 == 0), std::exception);
CHECK(solve(11*(x^2) + 35*x + 21 == 0) >= -0.8024 && solve(11*(x^2) + 35*x + 21 == 0) <= -0.8022);
CHECK_THROWS_AS(solve(20*(x^2) + 11*x + 7 == 0), std::exception);
CHECK_THROWS_AS(solve(25*(x^2) + 13*x + 19 == 0), std::exception);
CHECK(solve(8*(x^2) + 49*x + 4 == 0) >= -0.0829 && solve(8*(x^2) + 49*x + 4 == 0) <= -0.0827);
CHECK_THROWS_AS(solve(51*(x^2) + 23*x + 41 == 0), std::exception);
CHECK_THROWS_AS(solve(59*(x^2) + 1*x + 19 == 0), std::exception);
CHECK(solve(22*(x^2) + 57*x + 9 == 0) >= -0.169 && solve(22*(x^2) + 57*x + 9 == 0) <= -0.1688);
CHECK(solve(4*(x^2) + 32*x + 58 == 0) >= -2.7754 && solve(4*(x^2) + 32*x + 58 == 0) <= -2.7752);
CHECK_THROWS_AS(solve(13*(x^2) + 4*x + 5 == 0), std::exception);
CHECK_THROWS_AS(solve(51*(x^2) + 26*x + 49 == 0), std::exception);
CHECK_THROWS_AS(solve(11*(x^2) + 28*x + 58 == 0), std::exception);
CHECK_THROWS_AS(solve(52*(x^2) + 14*x + 38 == 0), std::exception);
CHECK(solve(1*(x^2) + 30*x + 37 == 0) >= -1.2888 && solve(1*(x^2) + 30*x + 37 == 0) <= -1.2886);
CHECK_THROWS_AS(solve(29*(x^2) + 37*x + 19 == 0), std::exception);
CHECK(solve(2*(x^2) + 10*x + 9 == 0) >= -1.1772 && solve(2*(x^2) + 10*x + 9 == 0) <= -1.177);
CHECK_THROWS_AS(solve(26*(x^2) + 38*x + 29 == 0), std::exception);
CHECK(solve(19*(x^2) + 53*x + 28 == 0) >= -0.7081 && solve(19*(x^2) + 53*x + 28 == 0) <= -0.7079);
CHECK_THROWS_AS(solve(44*(x^2) + 10*x + 54 == 0), std::exception);
CHECK_THROWS_AS(solve(26*(x^2) + 16*x + 37 == 0), std::exception);
CHECK_THROWS_AS(solve(15*(x^2) + 20*x + 59 == 0), std::exception);
CHECK(solve(56*(x^2) + 58*x + 7 == 0) >= -0.1396 && solve(56*(x^2) + 58*x + 7 == 0) <= -0.1394);
CHECK(solve(10*(x^2) + 50*x + 26 == 0) >= -0.5896 && solve(10*(x^2) + 50*x + 26 == 0) <= -0.5894);
CHECK_THROWS_AS(solve(11*(x^2) + 25*x + 15 == 0), std::exception);
CHECK_THROWS_AS(solve(49*(x^2) + 12*x + 32 == 0), std::exception);
CHECK_THROWS_AS(solve(44*(x^2) + 12*x + 52 == 0), std::exception);
CHECK_THROWS_AS(solve(27*(x^2) + 30*x + 52 == 0), std::exception);
CHECK(solve(1*(x^2) + 40*x + 30 == 0) >= -0.7647 && solve(1*(x^2) + 40*x + 30 == 0) <= -0.7645);
CHECK_THROWS_AS(solve(32*(x^2) + 22*x + 46 == 0), std::exception);


-----------------------------------

ComplexVariable y; 
 std::complex<double> mycomplex(0, 0); 
mycomplex= std::complex<double>(0, 8); 
CHECK(solve(18*y + 31i == 17*y+39i) == mycomplex); 
mycomplex= std::complex<double>(0, -11); 
CHECK(solve(1*y + 29i == 0*y+18i) == mycomplex); 
mycomplex= std::complex<double>(0, 4); 
CHECK(solve(18*y + 5i == 17*y+9i) == mycomplex); 
mycomplex= std::complex<double>(0, -1); 
CHECK(solve(6*y + 13i == 5*y+12i) == mycomplex); 
mycomplex= std::complex<double>(0, 33); 
CHECK(solve(8*y + 5i == 7*y+38i) == mycomplex); 
mycomplex= std::complex<double>(0, -9); 
CHECK(solve(8*y + 24i == 7*y+15i) == mycomplex); 
mycomplex= std::complex<double>(0, 7); 
CHECK(solve(31*y + 8i == 30*y+15i) == mycomplex); 
mycomplex= std::complex<double>(0, -3); 
CHECK(solve(35*y + 4i == 34*y+1i) == mycomplex); 
mycomplex= std::complex<double>(0, 28); 
CHECK(solve(2*y + 8i == 1*y+36i) == mycomplex); 
mycomplex= std::complex<double>(0, 20); 
CHECK(solve(32*y + 17i == 31*y+37i) == mycomplex); 
mycomplex= std::complex<double>(0, -13); 
CHECK(solve(12*y + 20i == 11*y+7i) == mycomplex); 
mycomplex= std::complex<double>(0, 5); 
CHECK(solve(8*y + 14i == 7*y+19i) == mycomplex); 
mycomplex= std::complex<double>(0, 20); 
CHECK(solve(31*y + 11i == 30*y+31i) == mycomplex); 
mycomplex= std::complex<double>(0, -1); 
CHECK(solve(16*y + 33i == 15*y+32i) == mycomplex); 
mycomplex= std::complex<double>(0, -29); 
CHECK(solve(30*y + 32i == 29*y+3i) == mycomplex); 
mycomplex= std::complex<double>(0, -3); 
CHECK(solve(3*y + 14i == 2*y+11i) == mycomplex); 
mycomplex= std::complex<double>(0, -2); 
CHECK(solve(32*y + 38i == 31*y+36i) == mycomplex); 
mycomplex= std::complex<double>(0, 5); 
CHECK(solve(8*y + 12i == 7*y+17i) == mycomplex); 
mycomplex= std::complex<double>(0, 1); 
CHECK(solve(32*y + 32i == 31*y+33i) == mycomplex); 
mycomplex= std::complex<double>(0, -3); 
CHECK(solve(23*y + 13i == 22*y+10i) == mycomplex); 
mycomplex= std::complex<double>(0, 3); 
CHECK(solve(40*y + 15i == 39*y+18i) == mycomplex); 
mycomplex= std::complex<double>(0, 5); 
CHECK(solve(11*y + 23i == 10*y+28i) == mycomplex); 
mycomplex= std::complex<double>(0, -15); 
CHECK(solve(34*y + 16i == 33*y+1i) == mycomplex); 
mycomplex= std::complex<double>(0, -26); 
CHECK(solve(18*y + 30i == 17*y+4i) == mycomplex); 
mycomplex= std::complex<double>(0, 13); 
CHECK(solve(3*y + 2i == 2*y+15i) == mycomplex); 
mycomplex= std::complex<double>(0, 18); 
CHECK(solve(21*y + 19i == 20*y+37i) == mycomplex); 
mycomplex= std::complex<double>(0, 11); 
CHECK(solve(25*y + 15i == 24*y+26i) == mycomplex); 
mycomplex= std::complex<double>(0, 19); 
CHECK(solve(3*y + 5i == 2*y+24i) == mycomplex); 
mycomplex= std::complex<double>(0, 7); 
CHECK(solve(38*y + 26i == 37*y+33i) == mycomplex); 
mycomplex= std::complex<double>(0, 3); 
CHECK(solve(38*y + 7i == 37*y+10i) == mycomplex); 
mycomplex= std::complex<double>(0, -5); 
CHECK(solve(14*y + 35i == 13*y+30i) == mycomplex); 
mycomplex= std::complex<double>(0, -4); 
CHECK(solve(16*y + 22i == 15*y+18i) == mycomplex); 
mycomplex= std::complex<double>(0, 22); 
CHECK(solve(2*y + 14i == 1*y+36i) == mycomplex); 
mycomplex= std::complex<double>(0, -10); 
CHECK(solve(9*y + 22i == 8*y+12i) == mycomplex); 
mycomplex= std::complex<double>(0, 32); 
CHECK(solve(30*y + 6i == 29*y+38i) == mycomplex); 
mycomplex= std::complex<double>(0, -3); 
CHECK(solve(1*y + 24i == 0*y+21i) == mycomplex); 
mycomplex= std::complex<double>(0, -8); 
CHECK(solve(21*y + 12i == 20*y+4i) == mycomplex); 
mycomplex= std::complex<double>(0, -27); 
CHECK(solve(37*y + 35i == 36*y+8i) == mycomplex); 
mycomplex= std::complex<double>(0, 28); 
CHECK(solve(28*y + 9i == 27*y+37i) == mycomplex); 
mycomplex= std::complex<double>(0, 5); 
CHECK(solve(23*y + 33i == 22*y+38i) == mycomplex); 
